//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Deployment"",
            ""id"": ""b6e63067-3461-4cc9-a4c3-343ef3c9da46"",
            ""actions"": [
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""0042c4b6-30fa-46e8-b29b-249e697e580e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseLeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""2b28b9ac-da74-43ad-beb8-b9b6f63af631"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3e80b8ff-f1e1-4fb8-86be-c5675f96e06a"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87005998-ef7d-4401-a503-75234a9d7059"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UnitCursorMode"",
            ""id"": ""d149482c-af0a-47ab-8151-5b0d4e681f91"",
            ""actions"": [
                {
                    ""name"": ""MouseCursorLeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""1a70bb70-080c-43a1-9f3e-64b78cc58343"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousPoint"",
                    ""type"": ""Value"",
                    ""id"": ""2deec084-32cb-4fe5-98a3-d7cb2e5ed6bd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseLeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""0e8b08b0-2eb2-4c0d-963d-39131559406b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2e768c65-6c9b-4678-a080-bdfa36bf94c4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseCursorLeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65f5aca4-346d-4e12-ad7e-117c6ea04099"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousPoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15f1cbe7-9136-41cb-bd42-77a213d592b6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Deployment
        m_Deployment = asset.FindActionMap("Deployment", throwIfNotFound: true);
        m_Deployment_Mouse = m_Deployment.FindAction("Mouse", throwIfNotFound: true);
        m_Deployment_MouseLeftClick = m_Deployment.FindAction("MouseLeftClick", throwIfNotFound: true);
        // UnitCursorMode
        m_UnitCursorMode = asset.FindActionMap("UnitCursorMode", throwIfNotFound: true);
        m_UnitCursorMode_MouseCursorLeftClick = m_UnitCursorMode.FindAction("MouseCursorLeftClick", throwIfNotFound: true);
        m_UnitCursorMode_MousPoint = m_UnitCursorMode.FindAction("MousPoint", throwIfNotFound: true);
        m_UnitCursorMode_MouseLeftClick = m_UnitCursorMode.FindAction("MouseLeftClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Deployment
    private readonly InputActionMap m_Deployment;
    private IDeploymentActions m_DeploymentActionsCallbackInterface;
    private readonly InputAction m_Deployment_Mouse;
    private readonly InputAction m_Deployment_MouseLeftClick;
    public struct DeploymentActions
    {
        private @GameInput m_Wrapper;
        public DeploymentActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouse => m_Wrapper.m_Deployment_Mouse;
        public InputAction @MouseLeftClick => m_Wrapper.m_Deployment_MouseLeftClick;
        public InputActionMap Get() { return m_Wrapper.m_Deployment; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DeploymentActions set) { return set.Get(); }
        public void SetCallbacks(IDeploymentActions instance)
        {
            if (m_Wrapper.m_DeploymentActionsCallbackInterface != null)
            {
                @Mouse.started -= m_Wrapper.m_DeploymentActionsCallbackInterface.OnMouse;
                @Mouse.performed -= m_Wrapper.m_DeploymentActionsCallbackInterface.OnMouse;
                @Mouse.canceled -= m_Wrapper.m_DeploymentActionsCallbackInterface.OnMouse;
                @MouseLeftClick.started -= m_Wrapper.m_DeploymentActionsCallbackInterface.OnMouseLeftClick;
                @MouseLeftClick.performed -= m_Wrapper.m_DeploymentActionsCallbackInterface.OnMouseLeftClick;
                @MouseLeftClick.canceled -= m_Wrapper.m_DeploymentActionsCallbackInterface.OnMouseLeftClick;
            }
            m_Wrapper.m_DeploymentActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Mouse.started += instance.OnMouse;
                @Mouse.performed += instance.OnMouse;
                @Mouse.canceled += instance.OnMouse;
                @MouseLeftClick.started += instance.OnMouseLeftClick;
                @MouseLeftClick.performed += instance.OnMouseLeftClick;
                @MouseLeftClick.canceled += instance.OnMouseLeftClick;
            }
        }
    }
    public DeploymentActions @Deployment => new DeploymentActions(this);

    // UnitCursorMode
    private readonly InputActionMap m_UnitCursorMode;
    private IUnitCursorModeActions m_UnitCursorModeActionsCallbackInterface;
    private readonly InputAction m_UnitCursorMode_MouseCursorLeftClick;
    private readonly InputAction m_UnitCursorMode_MousPoint;
    private readonly InputAction m_UnitCursorMode_MouseLeftClick;
    public struct UnitCursorModeActions
    {
        private @GameInput m_Wrapper;
        public UnitCursorModeActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseCursorLeftClick => m_Wrapper.m_UnitCursorMode_MouseCursorLeftClick;
        public InputAction @MousPoint => m_Wrapper.m_UnitCursorMode_MousPoint;
        public InputAction @MouseLeftClick => m_Wrapper.m_UnitCursorMode_MouseLeftClick;
        public InputActionMap Get() { return m_Wrapper.m_UnitCursorMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UnitCursorModeActions set) { return set.Get(); }
        public void SetCallbacks(IUnitCursorModeActions instance)
        {
            if (m_Wrapper.m_UnitCursorModeActionsCallbackInterface != null)
            {
                @MouseCursorLeftClick.started -= m_Wrapper.m_UnitCursorModeActionsCallbackInterface.OnMouseCursorLeftClick;
                @MouseCursorLeftClick.performed -= m_Wrapper.m_UnitCursorModeActionsCallbackInterface.OnMouseCursorLeftClick;
                @MouseCursorLeftClick.canceled -= m_Wrapper.m_UnitCursorModeActionsCallbackInterface.OnMouseCursorLeftClick;
                @MousPoint.started -= m_Wrapper.m_UnitCursorModeActionsCallbackInterface.OnMousPoint;
                @MousPoint.performed -= m_Wrapper.m_UnitCursorModeActionsCallbackInterface.OnMousPoint;
                @MousPoint.canceled -= m_Wrapper.m_UnitCursorModeActionsCallbackInterface.OnMousPoint;
                @MouseLeftClick.started -= m_Wrapper.m_UnitCursorModeActionsCallbackInterface.OnMouseLeftClick;
                @MouseLeftClick.performed -= m_Wrapper.m_UnitCursorModeActionsCallbackInterface.OnMouseLeftClick;
                @MouseLeftClick.canceled -= m_Wrapper.m_UnitCursorModeActionsCallbackInterface.OnMouseLeftClick;
            }
            m_Wrapper.m_UnitCursorModeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseCursorLeftClick.started += instance.OnMouseCursorLeftClick;
                @MouseCursorLeftClick.performed += instance.OnMouseCursorLeftClick;
                @MouseCursorLeftClick.canceled += instance.OnMouseCursorLeftClick;
                @MousPoint.started += instance.OnMousPoint;
                @MousPoint.performed += instance.OnMousPoint;
                @MousPoint.canceled += instance.OnMousPoint;
                @MouseLeftClick.started += instance.OnMouseLeftClick;
                @MouseLeftClick.performed += instance.OnMouseLeftClick;
                @MouseLeftClick.canceled += instance.OnMouseLeftClick;
            }
        }
    }
    public UnitCursorModeActions @UnitCursorMode => new UnitCursorModeActions(this);
    public interface IDeploymentActions
    {
        void OnMouse(InputAction.CallbackContext context);
        void OnMouseLeftClick(InputAction.CallbackContext context);
    }
    public interface IUnitCursorModeActions
    {
        void OnMouseCursorLeftClick(InputAction.CallbackContext context);
        void OnMousPoint(InputAction.CallbackContext context);
        void OnMouseLeftClick(InputAction.CallbackContext context);
    }
}
